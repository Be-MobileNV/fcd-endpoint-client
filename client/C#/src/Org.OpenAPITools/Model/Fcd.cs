/* 
 * fcd-endpoint-client
 *
 * FCD-endpoint-client
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@be-mobile.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FCD-data
    /// </summary>
    [DataContract]
    public partial class Fcd :  IEquatable<Fcd>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Fcd" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Fcd() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fcd" /> class.
        /// </summary>
        /// <param name="vehicleId">vehicleId (required).</param>
        /// <param name="vehicleType">vehicleType (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="lon">lon (required).</param>
        /// <param name="lat">lat (required).</param>
        /// <param name="heading">heading (required).</param>
        /// <param name="speed">speed (required).</param>
        /// <param name="hdop">hdop (required).</param>
        /// <param name="metadata">metadata (required).</param>
        public Fcd(string vehicleId = default(string), decimal vehicleType = default(decimal), decimal timestamp = default(decimal), decimal lon = default(decimal), decimal lat = default(decimal), decimal heading = default(decimal), decimal speed = default(decimal), decimal hdop = default(decimal), FcdMetadata metadata = default(FcdMetadata))
        {
            // to ensure "vehicleId" is required (not null)
            if (vehicleId == null)
            {
                throw new InvalidDataException("vehicleId is a required property for Fcd and cannot be null");
            }
            else
            {
                this.VehicleId = vehicleId;
            }
            
            // to ensure "vehicleType" is required (not null)
            if (vehicleType == null)
            {
                throw new InvalidDataException("vehicleType is a required property for Fcd and cannot be null");
            }
            else
            {
                this.VehicleType = vehicleType;
            }
            
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for Fcd and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            
            // to ensure "lon" is required (not null)
            if (lon == null)
            {
                throw new InvalidDataException("lon is a required property for Fcd and cannot be null");
            }
            else
            {
                this.Lon = lon;
            }
            
            // to ensure "lat" is required (not null)
            if (lat == null)
            {
                throw new InvalidDataException("lat is a required property for Fcd and cannot be null");
            }
            else
            {
                this.Lat = lat;
            }
            
            // to ensure "heading" is required (not null)
            if (heading == null)
            {
                throw new InvalidDataException("heading is a required property for Fcd and cannot be null");
            }
            else
            {
                this.Heading = heading;
            }
            
            // to ensure "speed" is required (not null)
            if (speed == null)
            {
                throw new InvalidDataException("speed is a required property for Fcd and cannot be null");
            }
            else
            {
                this.Speed = speed;
            }
            
            // to ensure "hdop" is required (not null)
            if (hdop == null)
            {
                throw new InvalidDataException("hdop is a required property for Fcd and cannot be null");
            }
            else
            {
                this.Hdop = hdop;
            }
            
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new InvalidDataException("metadata is a required property for Fcd and cannot be null");
            }
            else
            {
                this.Metadata = metadata;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets VehicleId
        /// </summary>
        [DataMember(Name="vehicleId", EmitDefaultValue=false)]
        public string VehicleId { get; set; }

        /// <summary>
        /// Gets or Sets VehicleType
        /// </summary>
        [DataMember(Name="vehicleType", EmitDefaultValue=false)]
        public decimal VehicleType { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public decimal Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Lon
        /// </summary>
        [DataMember(Name="lon", EmitDefaultValue=false)]
        public decimal Lon { get; set; }

        /// <summary>
        /// Gets or Sets Lat
        /// </summary>
        [DataMember(Name="lat", EmitDefaultValue=false)]
        public decimal Lat { get; set; }

        /// <summary>
        /// Gets or Sets Heading
        /// </summary>
        [DataMember(Name="heading", EmitDefaultValue=false)]
        public decimal Heading { get; set; }

        /// <summary>
        /// Gets or Sets Speed
        /// </summary>
        [DataMember(Name="speed", EmitDefaultValue=false)]
        public decimal Speed { get; set; }

        /// <summary>
        /// Gets or Sets Hdop
        /// </summary>
        [DataMember(Name="hdop", EmitDefaultValue=false)]
        public decimal Hdop { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public FcdMetadata Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fcd {\n");
            sb.Append("  VehicleId: ").Append(VehicleId).Append("\n");
            sb.Append("  VehicleType: ").Append(VehicleType).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Lon: ").Append(Lon).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Heading: ").Append(Heading).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  Hdop: ").Append(Hdop).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Fcd);
        }

        /// <summary>
        /// Returns true if Fcd instances are equal
        /// </summary>
        /// <param name="input">Instance of Fcd to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fcd input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VehicleId == input.VehicleId ||
                    (this.VehicleId != null &&
                    this.VehicleId.Equals(input.VehicleId))
                ) && 
                (
                    this.VehicleType == input.VehicleType ||
                    (this.VehicleType != null &&
                    this.VehicleType.Equals(input.VehicleType))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Lon == input.Lon ||
                    (this.Lon != null &&
                    this.Lon.Equals(input.Lon))
                ) && 
                (
                    this.Lat == input.Lat ||
                    (this.Lat != null &&
                    this.Lat.Equals(input.Lat))
                ) && 
                (
                    this.Heading == input.Heading ||
                    (this.Heading != null &&
                    this.Heading.Equals(input.Heading))
                ) && 
                (
                    this.Speed == input.Speed ||
                    (this.Speed != null &&
                    this.Speed.Equals(input.Speed))
                ) && 
                (
                    this.Hdop == input.Hdop ||
                    (this.Hdop != null &&
                    this.Hdop.Equals(input.Hdop))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VehicleId != null)
                    hashCode = hashCode * 59 + this.VehicleId.GetHashCode();
                if (this.VehicleType != null)
                    hashCode = hashCode * 59 + this.VehicleType.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Lon != null)
                    hashCode = hashCode * 59 + this.Lon.GetHashCode();
                if (this.Lat != null)
                    hashCode = hashCode * 59 + this.Lat.GetHashCode();
                if (this.Heading != null)
                    hashCode = hashCode * 59 + this.Heading.GetHashCode();
                if (this.Speed != null)
                    hashCode = hashCode * 59 + this.Speed.GetHashCode();
                if (this.Hdop != null)
                    hashCode = hashCode * 59 + this.Hdop.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // VehicleId (string) minLength
            if(this.VehicleId != null && this.VehicleId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VehicleId, length must be greater than 1.", new [] { "VehicleId" });
            }

            yield break;
        }
    }

}
