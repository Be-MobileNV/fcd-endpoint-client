# coding: utf-8

"""
    fcd-endpoint-client

    FCD-endpoint-client  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@be-mobile.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Fcd(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vehicle_id': 'str',
        'vehicle_type': 'float',
        'timestamp': 'float',
        'lon': 'float',
        'lat': 'float',
        'heading': 'float',
        'speed': 'float',
        'hdop': 'float',
        'metadata': 'FcdMetadata'
    }

    attribute_map = {
        'vehicle_id': 'vehicleId',
        'vehicle_type': 'vehicleType',
        'timestamp': 'timestamp',
        'lon': 'lon',
        'lat': 'lat',
        'heading': 'heading',
        'speed': 'speed',
        'hdop': 'hdop',
        'metadata': 'metadata'
    }

    def __init__(self, vehicle_id=None, vehicle_type=None, timestamp=None, lon=None, lat=None, heading=None, speed=None, hdop=None, metadata=None, local_vars_configuration=None):  # noqa: E501
        """Fcd - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._vehicle_id = None
        self._vehicle_type = None
        self._timestamp = None
        self._lon = None
        self._lat = None
        self._heading = None
        self._speed = None
        self._hdop = None
        self._metadata = None
        self.discriminator = None

        self.vehicle_id = vehicle_id
        self.vehicle_type = vehicle_type
        self.timestamp = timestamp
        self.lon = lon
        self.lat = lat
        self.heading = heading
        self.speed = speed
        self.hdop = hdop
        self.metadata = metadata

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this Fcd.  # noqa: E501


        :return: The vehicle_id of this Fcd.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this Fcd.


        :param vehicle_id: The vehicle_id of this Fcd.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and vehicle_id is None:  # noqa: E501
            raise ValueError("Invalid value for `vehicle_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                vehicle_id is not None and len(vehicle_id) < 1):
            raise ValueError("Invalid value for `vehicle_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._vehicle_id = vehicle_id

    @property
    def vehicle_type(self):
        """Gets the vehicle_type of this Fcd.  # noqa: E501


        :return: The vehicle_type of this Fcd.  # noqa: E501
        :rtype: float
        """
        return self._vehicle_type

    @vehicle_type.setter
    def vehicle_type(self, vehicle_type):
        """Sets the vehicle_type of this Fcd.


        :param vehicle_type: The vehicle_type of this Fcd.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and vehicle_type is None:  # noqa: E501
            raise ValueError("Invalid value for `vehicle_type`, must not be `None`")  # noqa: E501

        self._vehicle_type = vehicle_type

    @property
    def timestamp(self):
        """Gets the timestamp of this Fcd.  # noqa: E501


        :return: The timestamp of this Fcd.  # noqa: E501
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Fcd.


        :param timestamp: The timestamp of this Fcd.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def lon(self):
        """Gets the lon of this Fcd.  # noqa: E501


        :return: The lon of this Fcd.  # noqa: E501
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this Fcd.


        :param lon: The lon of this Fcd.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and lon is None:  # noqa: E501
            raise ValueError("Invalid value for `lon`, must not be `None`")  # noqa: E501

        self._lon = lon

    @property
    def lat(self):
        """Gets the lat of this Fcd.  # noqa: E501


        :return: The lat of this Fcd.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Fcd.


        :param lat: The lat of this Fcd.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and lat is None:  # noqa: E501
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def heading(self):
        """Gets the heading of this Fcd.  # noqa: E501


        :return: The heading of this Fcd.  # noqa: E501
        :rtype: float
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this Fcd.


        :param heading: The heading of this Fcd.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and heading is None:  # noqa: E501
            raise ValueError("Invalid value for `heading`, must not be `None`")  # noqa: E501

        self._heading = heading

    @property
    def speed(self):
        """Gets the speed of this Fcd.  # noqa: E501


        :return: The speed of this Fcd.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this Fcd.


        :param speed: The speed of this Fcd.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and speed is None:  # noqa: E501
            raise ValueError("Invalid value for `speed`, must not be `None`")  # noqa: E501

        self._speed = speed

    @property
    def hdop(self):
        """Gets the hdop of this Fcd.  # noqa: E501


        :return: The hdop of this Fcd.  # noqa: E501
        :rtype: float
        """
        return self._hdop

    @hdop.setter
    def hdop(self, hdop):
        """Sets the hdop of this Fcd.


        :param hdop: The hdop of this Fcd.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and hdop is None:  # noqa: E501
            raise ValueError("Invalid value for `hdop`, must not be `None`")  # noqa: E501

        self._hdop = hdop

    @property
    def metadata(self):
        """Gets the metadata of this Fcd.  # noqa: E501


        :return: The metadata of this Fcd.  # noqa: E501
        :rtype: FcdMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Fcd.


        :param metadata: The metadata of this Fcd.  # noqa: E501
        :type: FcdMetadata
        """
        if self.local_vars_configuration.client_side_validation and metadata is None:  # noqa: E501
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Fcd):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Fcd):
            return True

        return self.to_dict() != other.to_dict()
